name: Test

# Run on push
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        # Allow failures on nightly
        exclude:
          - rust: nightly
        include:
          - rust: nightly
            experimental: true

    steps:
    # Checkout repository
    - name: Checkout
      uses: actions/checkout@v4

    # Setup Rust toolchain
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    # Cache setup (reduce build time)
    - name: Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: Linux-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    # Format check (stable only)
    - name: Format check
      if: matrix.rust == 'stable'
      run: cargo fmt --all -- --check

    # Static analysis with Clippy (stable only)
    - name: Clippy
      if: matrix.rust == 'stable'
      run: cargo clippy -- -D warnings
      continue-on-error: ${{ matrix.experimental == true }}

    # Build
    - name: Build
      run: cargo build --verbose
      continue-on-error: ${{ matrix.experimental == true }}

    # Run tests
    - name: Test
      run: cargo test --verbose
      continue-on-error: ${{ matrix.experimental == true }}

    # Documentation generation test
    - name: Generate documentation
      if: matrix.rust == 'stable'
      run: cargo doc --no-deps --document-private-items

  # Test coverage measurement (optional)
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Measure coverage
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

    # Upload coverage report (optional)
    # To use CODECOV, add CODECOV_TOKEN in GitHub repository settings
    - name: Upload coverage report
      uses: codecov/codecov-action@v4
      if: env.CODECOV_TOKEN != ''
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        fail_ci_if_error: false

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Security audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}