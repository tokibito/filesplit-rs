name: Release

# タグがプッシュされたときに実行
on:
  push:
    tags:
      - 'v*'

jobs:
  # Release build
  build:
    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive: tar.gz
          
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
          
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    # Dependencies for musl target (Linux only)
    - name: Install musl dependencies
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools

    # Build
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    # Create archive (Linux/macOS)
    - name: Create archive (tar.gz)
      if: matrix.archive == 'tar.gz'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../filesplit-rs-${{ matrix.target }}.tar.gz filesplit-rs
        cd -

    # Create archive (Windows)
    - name: Create archive (zip)
      if: matrix.archive == 'zip'
      shell: pwsh
      run: |
        cd target/${{ matrix.target }}/release
        Compress-Archive -Path filesplit-rs.exe -DestinationPath ../../../filesplit-rs-${{ matrix.target }}.zip
        cd -

    # Upload artifacts
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: filesplit-rs-${{ matrix.target }}
        path: filesplit-rs-${{ matrix.target }}.${{ matrix.archive }}

  # Create GitHub release
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for release creation
    
    steps:
    - uses: actions/checkout@v4

    # Download artifacts
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    # Create release
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}